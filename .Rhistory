names(doc[[1]])
# Function to fetch all transaction data
# from FTS using appeal IDs.
ftsAppealSummary <- function(id = NULL, year = NULL) {
# checking for parameters
if (is.null(id) & is.null(year)) {
stop('Please provide an emergency id or year. See documentation for more details. ?fetchEmergencyData')
}
if (!is.null(id) & !is.null(year)) {
stop('Provide either an emergency id OR a year. See documentation for more details. ?fetchEmergencyData')
}
## For emergency ids.
if (!is.null(id)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/id/'  # base url
for (i in 1:length(id)) {
m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
doc <- fromJSON(getURL(query_url))
it <- as.data.frame(doc)
if (i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
}
## For years.
if (!is.null(year)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/year/'  # base url
for (i in 1:length(year)) {
m = paste("Appeal for year:", year[i], " | ")
cat(m)
query_url = paste0(url, year[i], ".json")
doc <- fromJSON(getURL(query_url))
out <- data.frame(
id = sapply(doc, function(x) return(data.frame(x$id))),
emergency_id = sapply(doc, function(x) return(data.frame(x$emergency_id))),
title = sapply(doc, function(x) return(data.frame(x$title))),
year = sapply(doc, function(x) return(data.frame(x$year))),
start_date = sapply(doc, function(x) return(data.frame(x$start_date))),
end_date = sapply(doc, function(x) return(data.frame(x$end_date))),
country = sapply(doc, function(x) return(data.frame(x$country))),
type = sapply(doc, function(x) return(data.frame(x$type))),
launch_date = sapply(doc, function(x) return(data.frame(x$launch_date))),
original_requirements = sapply(doc, function(x) return(data.frame(x$original_requirements))),
current_requirements = sapply(doc, function(x) return(data.frame(x$current_requirements))),
funding = sapply(doc, function(x) return(data.frame(x$funding))),
pledges = sapply(doc, function(x) return(data.frame(x$pledges)))
)
cat("done!\n")
}
cat("--------------------------------\n")
}
return(out)
}
x <- ftsAppealSummary(year = 2015)
View(x)
id = sapply(doc, function(x) return(data.frame(x$id)))
View(id)
id
id = lapply(doc, function(x) return(data.frame(x$id)))
id
View(x)
library(jsonlite)
doc <- fromJSON(getURL(query_url))
View(doc)
# Function to fetch all transaction data
# from FTS using appeal IDs.
ftsAppealSummary <- function(id = NULL, year = NULL) {
# checking for parameters
if (is.null(id) & is.null(year)) {
stop('Please provide an emergency id or year. See documentation for more details. ?fetchEmergencyData')
}
if (!is.null(id) & !is.null(year)) {
stop('Provide either an emergency id OR a year. See documentation for more details. ?fetchEmergencyData')
}
## For emergency ids.
if (!is.null(id)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/id/'  # base url
for (i in 1:length(id)) {
m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
doc <- fromJSON(getURL(query_url))
it <- as.data.frame(doc)
if (i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
}
## For years.
if (!is.null(year)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/year/'  # base url
for (i in 1:length(year)) {
m = paste("Appeal for year:", year[i], " | ")
cat(m)
query_url = paste0(url, year[i], ".json")
out <- fromJSON(getURL(query_url))
cat("done!\n")
}
cat("--------------------------------\n")
}
return(out)
}
doc <- fromJSON(getURL(query_url))
x <- ftsAppealSummary(2015)
View(x)
# Function to fetch all transaction data
# from FTS using appeal IDs.
ftsAppealSummary <- function(id = NULL, year = NULL) {
# checking for parameters
if (is.null(id) & is.null(year)) {
stop('Please provide an emergency id or year. See documentation for more details. ?fetchEmergencyData')
}
if (!is.null(id) & !is.null(year)) {
stop('Provide either an emergency id OR a year. See documentation for more details. ?fetchEmergencyData')
}
## For emergency ids.
if (!is.null(id)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/id/'  # base url
for (i in 1:length(id)) {
m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
doc <- fromJSON(getURL(query_url))
it <- as.data.frame(doc)
if (i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
}
## For years.
if (!is.null(year)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/year/'  # base url
for (i in 1:length(year)) {
m = paste("Appeal for year:", year[i], " | ")
cat(m)
query_url = paste0(url, year[i], ".json")
it <- fromJSON(getURL(query_url))
if(i == 1) it <- out
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
}
return(out)
}
x <- ftsAppealSummary(2015)
View(x)
it <- fromJSON(getURL(query_url))
View(it)
class(it)
# Function to fetch all transaction data
# from FTS using appeal IDs.
ftsAppealSummary <- function(id = NULL, year = NULL) {
# checking for parameters
if (is.null(id) & is.null(year)) {
stop('Please provide an emergency id or year. See documentation for more details. ?fetchEmergencyData')
}
if (!is.null(id) & !is.null(year)) {
stop('Provide either an emergency id OR a year. See documentation for more details. ?fetchEmergencyData')
}
## For emergency ids.
if (!is.null(id)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/id/'  # base url
for (i in 1:length(id)) {
m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
doc <- fromJSON(getURL(query_url))
it <- as.data.frame(doc)
if (i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
}
## For years.
if (!is.null(year)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/year/'  # base url
for (i in 1:length(year)) {
m = paste("Appeal for year:", year[i], " | ")
cat(m)
query_url = paste0(url, year[i], ".json")
it <- fromJSON(getURL(query_url))
if(i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
}
return(out)
}
View(x)
it <- fromJSON(getURL(query_url))
x <- ftsAppealSummary(2015)
View(x)
# Function to fetch all transaction data
# from FTS using appeal IDs.
ftsAppealSummary <- function(id = NULL, year = NULL) {
# checking for parameters
if (is.null(id) & is.null(year)) {
stop('Please provide an emergency id or year. See documentation for more details. ?fetchEmergencyData')
}
if (!is.null(id) & !is.null(year)) {
stop('Provide either an emergency id OR a year. See documentation for more details. ?fetchEmergencyData')
}
## For emergency ids.
if (!is.null(id)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/id/'  # base url
for (i in 1:length(id)) {
m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
doc <- fromJSON(getURL(query_url))
it <- as.data.frame(doc)
if (i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
}
## For years.
if (!is.null(year)) {
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/year/'  # base url
for (i in 1:length(year)) {
m = paste("Appeal for year:", year[i], " | ")
cat(m)
query_url = paste0(url, year[i], ".json")
it <- fromJSON(getURL(query_url))
if(i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
}
return(out)
}
x <- ftsAppealSummary(year = 2015)
View(x)
x <- ftsAppealSummary(year = c(2000:2014))
View(x)
x <- ftsAppealSummary(c(1090, 1079))
View(x)
# Function to fetch record-by-record of each
# appeal in FTS.
ftsAppealTransactions <- function(id = NULL) {
# checking for parameters
if (is.null(id)) {
stop('Please provide an emergency id or year. See documentation for more details. ?fetchEmergencyData')
}
## For emergency ids.
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/id/'  # base url
for (i in 1:length(id)) {
m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
it <- fromJSON(getURL(query_url))
if(i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
return(out)
}
names(x)
y <- fetchAppealTransactions(x$id)
# Function to fetch record-by-record of each
# appeal in FTS.
ftsAppealTransactions <- function(id = NULL) {
# checking for parameters
if (is.null(id)) {
stop('Please provide an emergency id or year. See documentation for more details. ?fetchEmergencyData')
}
## For emergency ids.
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Appeal/id/'  # base url
for (i in 1:length(id)) {
m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
it <- fromJSON(getURL(query_url))
if(i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
return(out)
}
y <- fetchAppealTransactions(x$id)
y <- ftsAppealTransactions(x$id)
x <- ftsAppealSummary(year = 2015)
View(x)
y <- ftsAppealTransactions(x$id)
View(y)
# Function to fetch record-by-record of each
# appeal in FTS.
ftsAppealTransactions <- function(id = NULL) {
# checking for parameters
if (is.null(id)) {
stop('Please provide an emergency id or year. See documentation for more details. ?fetchEmergencyData')
}
## For emergency ids.
cat("--------------------------------\n")
url = 'http://fts.unocha.org/api/v1/Contribution/appeal/'  # base url
for (i in 1:length(id)) {
m = paste("Appeal summary:", id[i], " | ")
cat(m)
query_url = paste0(url, id[i], ".json")
it <- fromJSON(getURL(query_url))
if(i == 1) out <- it
else out <- rbind(out, it)
cat("done!\n")
}
cat("--------------------------------\n")
return(out)
}
y <- ftsAppealTransactions(x$id)
View(y)
data(mtcars)
attach(mtcars)
View(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt); fit
factor(cyl)
unique(factor(cyl)))
unique(factor(cyl))
summary(fit)
qplot(wt, mpg, data=mtcars, colour=factor(cyl))
library(ggplot2)
qplot(wt, mpg, data=mtcars, colour=factor(cyl))
fit <- lm(mpg ~ factor(cyl) + wt); fit
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt); fit
summary(fit)
fit <- lm(mpg ~ factor(cyl)); fit
fit <- lm(mpg ~ as.factor(cyl) + wt); fit
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt); fit
summary(fit)
fit$coefficients
unique(factor(cyl))
length(unique(factor(cyl)))
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt); fit
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
fit2 <- lm(mpg ~ factor(cyl) + wt); fit2
summary(fit2)
27.9199 - 33.9908
fit$coefficients
fit$coefficients[1]
fit$coefficients[1] - fit$coefficients[3]
fit$coefficients[3] - fit$coefficients[1]
fit <- lm(mpg ~ factor(cyl) + wt); fit
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
fit2 <- lm(mpg ~ factor(cyl) + 0); fit2
summary(fit2)
26.6636 - 19.7429
33 - 29
29 - 27
fit <- lm(mpg ~ factor(cyl) + wt + cyl:wt + 0)
fit2 <- lm(mpg ~ factor(cyl) + wt + cyl:wt + 0); fit2
fit2 <- lm(mpg ~ factor(cyl) + wt + cyl*wt + 0); fit2
fit2 <- lm(mpg ~ factor(cyl) + wt + cyl:wt + 0); fit2
summary(fit2)
anova(fit, fit2)
a <- anova(fit, fit2); summary(a)
a <- anova(fit, fit2); summary(a); a
a <- anova(fit, fit2); summary(a); a
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
fit2 <- lm(mpg ~ factor(cyl) + wt + cyl:wt + 0); fit2
summary(fit2)
a <- anova(fit, fit2); summary(a); a
?I
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
# question 4
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit)
?mtcars
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl) + 0, data = mtcars)
summary(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?hatvalues
fit <- lm(y ~ x)
hatvalues(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
?dfbeta
dfbeta(fit)
hatvalues(fit)
hatvalues(fit)
hatvalues(fit, 5)
hatvalues(fit)
?dfbeta
# question 6
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbeta(fit)
# question 6
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
dfbetas(fit)
dfbeta(fit)
influence.measures(fit)
?influence.measures
# question 2
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
fit2 <- lm(mpg ~ factor(cyl) + 0); fit2
summary(fit2)
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
fit2 <- lm(mpg ~ factor(cyl) + 0); fit2
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
# question 3
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt + 0); fit
summary(fit)
fit2 <- lm(mpg ~ factor(cyl) + wt + cyl:wt + 0); fit2
summary(fit2)
a <- anova(fit, fit2); summary(a); a
library(swirl)
swirld()
swirl()
33/36
deck
1/52
52
4/52
13/52
info
info()
4
5/52
1/52
(12/52)*(11/52)*(10/52)*(9/52)
(12/51)*(11/50)*(10/49)*(9/48)
(12/51)*(11/50)*(10/49)*(9/48)*1
(12/51)*(11/50)*(10/49)*(9/48)*1
info()
skip()
4
(3*4)/52
2/51
install.packages(c("data.table", "RCurl"))
install.packages("Rcpp")
library("acepack", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:acepack", unload=TRUE)
library(dplur)
library(dplyr)
summarise()
2 + 2
a = 2 +2
b = 1
b + a
library(rapier)
?rapier
setwd("~/Documents/Programming/HDXViz/hdxviz-unosat")
library(scales)
library(ggplot2)
source('scripts/R/process.R')
data <- ProcessData()
plot.proucts_per_year <-
ggplot(filter(data, dataset_date > as.Date('2014-01-01'))) +
geom_bar(aes(dataset_date, fill=region), stat='bin', binwidth=7) +
scale_x_date(labels = date_format("%Y-%m"), breaks = date_breaks("month")) +
labs(x = 'Number of Products', y = 'Year', title = 'UNOSAT Products per Year and Continent')
ggsave('images/plot_products_per_year.png', plot.proucts_per_year)
plot.proucts_per_year
plot.proucts_per_year
plot.proucts_per_year <- ggplot(data) +
geom_bar(aes(dataset_date, fill=region), stat='bin') +
labs(x = 'Number of Products', y = 'Year', title = 'UNOSAT Products per Year and Continent')
ggsave('images/plot_products_per_year.png', plot.proucts_per_year)
plot.proucts_per_year
ggplot(data) +
geom_bar(aes(dataset_date), stat='bin') +
labs(x = 'Number of Products', y = 'Year', title = 'UNOSAT Products per Year and Continent')
plot.proucts_per_year <- ggplot(data) +
geom_bar(aes(dataset_date), stat='bin') +
labs(x = 'Number of Products', y = 'Year', title = 'UNOSAT Products per Year and Continent')
ggsave('images/plot_products_per_year_without_color.png', plot.proucts_per_year)
